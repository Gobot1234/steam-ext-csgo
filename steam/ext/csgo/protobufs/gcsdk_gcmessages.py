# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: gcsdk_gcmessages.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List

import betterproto


class GcClientLauncherType(betterproto.Enum):
    Default = 0
    PerfectWorld = 1
    SteamChina = 2


class GcConnectionStatus(betterproto.Enum):
    HaveSession = 0
    GCGoingDown = 1
    NoSession = 2
    NoSessionInLogonQueue = 3
    NoSteam = 4


@dataclass(eq=False, repr=False)
class CMsgSoidOwner(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgSoSingleObject(betterproto.Message):
    type_id: int = betterproto.int32_field(2)
    object_data: bytes = betterproto.bytes_field(3)
    version: int = betterproto.fixed64_field(4)
    owner_soid: "CMsgSoidOwner" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CMsgSoMultipleObjects(betterproto.Message):
    objects_modified: List["CMsgSoMultipleObjectsSingleObject"] = betterproto.message_field(2)
    version: int = betterproto.fixed64_field(3)
    owner_soid: "CMsgSoidOwner" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CMsgSoMultipleObjectsSingleObject(betterproto.Message):
    type_id: int = betterproto.int32_field(1)
    object_data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgSoCacheSubscribed(betterproto.Message):
    objects: List["CMsgSoCacheSubscribedSubscribedType"] = betterproto.message_field(2)
    version: int = betterproto.fixed64_field(3)
    owner_soid: "CMsgSoidOwner" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgSoCacheSubscribedSubscribedType(betterproto.Message):
    type_id: int = betterproto.int32_field(1)
    object_data: List[bytes] = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgSoCacheUnsubscribed(betterproto.Message):
    owner_soid: "CMsgSoidOwner" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgSoCacheSubscriptionCheck(betterproto.Message):
    version: int = betterproto.fixed64_field(2)
    owner_soid: "CMsgSoidOwner" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgSoCacheSubscriptionRefresh(betterproto.Message):
    owner_soid: "CMsgSoidOwner" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgSoCacheVersion(betterproto.Message):
    version: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgAccountDetails(betterproto.Message):
    valid: bool = betterproto.bool_field(1)
    account_name: str = betterproto.string_field(2)
    public_profile: bool = betterproto.bool_field(4)
    public_inventory: bool = betterproto.bool_field(5)
    vac_banned: bool = betterproto.bool_field(6)
    cyber_cafe: bool = betterproto.bool_field(7)
    school_account: bool = betterproto.bool_field(8)
    free_trial_account: bool = betterproto.bool_field(9)
    subscribed: bool = betterproto.bool_field(10)
    low_violence: bool = betterproto.bool_field(11)
    limited: bool = betterproto.bool_field(12)
    trusted: bool = betterproto.bool_field(13)
    package: int = betterproto.uint32_field(14)
    time_cached: int = betterproto.fixed32_field(15)
    account_locked: bool = betterproto.bool_field(16)
    community_banned: bool = betterproto.bool_field(17)
    trade_banned: bool = betterproto.bool_field(18)
    eligible_for_community_market: bool = betterproto.bool_field(19)


@dataclass(eq=False, repr=False)
class CMsgGcMultiplexMessage(betterproto.Message):
    msgtype: int = betterproto.uint32_field(1)
    payload: bytes = betterproto.bytes_field(2)
    steamids: List[int] = betterproto.fixed64_field(3)
    replytogc: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgGcMultiplexMessageResponse(betterproto.Message):
    msgtype: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CgcToGcMsgMasterAck(betterproto.Message):
    dir_index: int = betterproto.uint32_field(1)
    gc_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CgcToGcMsgMasterAckResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CgcToGcMsgMasterStartupComplete(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CgcToGcMsgRouted(betterproto.Message):
    msg_type: int = betterproto.uint32_field(1)
    sender_id: int = betterproto.fixed64_field(2)
    net_message: bytes = betterproto.bytes_field(3)
    ip: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CgcToGcMsgRoutedReply(betterproto.Message):
    msg_type: int = betterproto.uint32_field(1)
    net_message: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcUpdateSessionIp(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    ip: int = betterproto.fixed32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcRequestSessionIp(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcRequestSessionIpResponse(betterproto.Message):
    ip: int = betterproto.fixed32_field(1)


@dataclass(eq=False, repr=False)
class CMsgSoCacheHaveVersion(betterproto.Message):
    soid: "CMsgSoidOwner" = betterproto.message_field(1)
    version: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientHello(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    socache_have_versions: List["CMsgSoCacheHaveVersion"] = betterproto.message_field(2)
    client_session_need: int = betterproto.uint32_field(3)
    client_launcher: int = betterproto.uint32_field(4)
    partner_srcid: int = betterproto.uint32_field(5)
    partner_accountid: int = betterproto.uint32_field(6)
    partner_accountflags: int = betterproto.uint32_field(7)
    partner_accountbalance: int = betterproto.uint32_field(8)
    steam_launcher: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CMsgServerHello(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    socache_have_versions: List["CMsgSoCacheHaveVersion"] = betterproto.message_field(2)
    legacy_client_session_need: int = betterproto.uint32_field(3)
    client_launcher: int = betterproto.uint32_field(4)
    legacy_steamdatagram_routing: bytes = betterproto.bytes_field(6)
    required_internal_addr: int = betterproto.uint32_field(7)
    steamdatagram_login: bytes = betterproto.bytes_field(8)


@dataclass(eq=False, repr=False)
class CMsgClientWelcome(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    game_data: bytes = betterproto.bytes_field(2)
    outofdate_subscribed_caches: List["CMsgSoCacheSubscribed"] = betterproto.message_field(3)
    uptodate_subscribed_caches: List["CMsgSoCacheSubscriptionCheck"] = betterproto.message_field(4)
    location: "CMsgClientWelcomeLocation" = betterproto.message_field(5)
    game_data2: bytes = betterproto.bytes_field(6)
    rtime32_gc_welcome_timestamp: int = betterproto.uint32_field(7)
    currency: int = betterproto.uint32_field(8)
    balance: int = betterproto.uint32_field(9)
    balance_url: str = betterproto.string_field(10)
    txn_country_code: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class CMsgClientWelcomeLocation(betterproto.Message):
    latitude: float = betterproto.float_field(1)
    longitude: float = betterproto.float_field(2)
    country: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgConnectionStatus(betterproto.Message):
    status: "GcConnectionStatus" = betterproto.enum_field(1)
    client_session_need: int = betterproto.uint32_field(2)
    queue_position: int = betterproto.int32_field(3)
    queue_size: int = betterproto.int32_field(4)
    wait_seconds: int = betterproto.int32_field(5)
    estimated_wait_seconds_remaining: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class CWorkshopPopulateItemDescriptionsRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    languages: List[
        "CWorkshopPopulateItemDescriptionsRequestItemDescriptionsLanguageBlock"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CWorkshopPopulateItemDescriptionsRequestSingleItemDescription(betterproto.Message):
    gameitemid: int = betterproto.uint32_field(1)
    item_description: str = betterproto.string_field(2)
    one_per_account: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CWorkshopPopulateItemDescriptionsRequestItemDescriptionsLanguageBlock(betterproto.Message):
    language: str = betterproto.string_field(1)
    descriptions: List["CWorkshopPopulateItemDescriptionsRequestSingleItemDescription"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CWorkshopGetContributorsRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    gameitemid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CWorkshopGetContributorsResponse(betterproto.Message):
    contributors: List[int] = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CWorkshopSetItemPaymentRulesRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    gameitemid: int = betterproto.uint32_field(2)
    associated_workshop_files: List[
        "CWorkshopSetItemPaymentRulesRequestWorkshopItemPaymentRule"
    ] = betterproto.message_field(3)
    partner_accounts: List["CWorkshopSetItemPaymentRulesRequestPartnerItemPaymentRule"] = betterproto.message_field(4)
    validate_only: bool = betterproto.bool_field(5)
    make_workshop_files_subscribable: bool = betterproto.bool_field(6)
    associated_workshop_file_for_direct_payments: "CWorkshopSetItemPaymentRulesRequestWorkshopDirectPaymentRule" = (
        betterproto.message_field(7)
    )


@dataclass(eq=False, repr=False)
class CWorkshopSetItemPaymentRulesRequestWorkshopItemPaymentRule(betterproto.Message):
    workshop_file_id: int = betterproto.uint64_field(1)
    revenue_percentage: float = betterproto.float_field(2)
    rule_description: str = betterproto.string_field(3)
    rule_type: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CWorkshopSetItemPaymentRulesRequestWorkshopDirectPaymentRule(betterproto.Message):
    workshop_file_id: int = betterproto.uint64_field(1)
    rule_description: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CWorkshopSetItemPaymentRulesRequestPartnerItemPaymentRule(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    revenue_percentage: float = betterproto.float_field(2)
    rule_description: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CWorkshopSetItemPaymentRulesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CGameServersAggregationQueryRequest(betterproto.Message):
    filter: str = betterproto.string_field(1)
    group_fields: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CGameServersAggregationQueryResponse(betterproto.Message):
    groups: List["CGameServersAggregationQueryResponseGroup"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CGameServersAggregationQueryResponseGroup(betterproto.Message):
    group_values: List[str] = betterproto.string_field(1)
    servers_empty: int = betterproto.uint32_field(2)
    servers_full: int = betterproto.uint32_field(3)
    servers_total: int = betterproto.uint32_field(4)
    players_humans: int = betterproto.uint32_field(5)
    players_bots: int = betterproto.uint32_field(6)
    player_capacity: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CWorkshopAddSpecialPaymentRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    gameitemid: int = betterproto.uint32_field(2)
    date: str = betterproto.string_field(3)
    payment_us_usd: int = betterproto.uint64_field(4)
    payment_row_usd: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class CWorkshopAddSpecialPaymentResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CProductInfoSetRichPresenceLocalizationRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    languages: List["CProductInfoSetRichPresenceLocalizationRequestLanguageSection"] = betterproto.message_field(2)
    steamid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CProductInfoSetRichPresenceLocalizationRequestToken(betterproto.Message):
    token: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CProductInfoSetRichPresenceLocalizationRequestLanguageSection(betterproto.Message):
    language: str = betterproto.string_field(1)
    tokens: List["CProductInfoSetRichPresenceLocalizationRequestToken"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CProductInfoSetRichPresenceLocalizationResponse(betterproto.Message):
    pass
